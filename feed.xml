<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>刘蛟区块链博客</title>
    <description>初级区块链工程师</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 11 May 2018 20:28:33 +0800</pubDate>
    <lastBuildDate>Fri, 11 May 2018 20:28:33 +0800</lastBuildDate>
    <generator>Jekyll v3.5.1</generator>
    
      <item>
        <title>星云链nebulas钱包安装</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;作者:刘蛟&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;星云链钱包安装&quot;&gt;星云链钱包安装&lt;/h1&gt;
&lt;p&gt;1.进入github克隆地址
https://github.com/nebulasio/web-wallet
新建文件夹打开命令行 输入命令&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/nebulasio/web-wallet.git
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;2.点击index就可以进入钱包了&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;size-full wp-image-776 aligncenter&quot; src=&quot;https://blog.nebulas.io/wp-content/uploads/2018/04/3.png&quot; alt=&quot;&quot; width=&quot;499&quot; height=&quot;290&quot; /&gt;&lt;/p&gt;

&lt;p&gt;3.创建钱包,输入密码,自动生成密钥,下面密码库文件&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;size-medium wp-image-781 aligncenter&quot; src=&quot;https://blog.nebulas.io/wp-content/uploads/2018/04/8-800x370.png&quot; alt=&quot;&quot; width=&quot;800&quot; height=&quot;370&quot; srcset=&quot;https://blog.nebulas.io/wp-content/uploads/2018/04/8-800x370.png 800w, https://blog.nebulas.io/wp-content/uploads/2018/04/8-768x355.png 768w, https://blog.nebulas.io/wp-content/uploads/2018/04/8-1200x555.png 1200w&quot; sizes=&quot;(max-width: 800px) 100vw, 800px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;4.谷歌浏览器插件钱包安装
https://github.com/ChengOrangeJu/WebExtensionWallet
下载压缩包,解压缩,然后打开谷歌插件,选择开发者模式,直接,直接选择已经解压的扩展程序
安装完毕,右上角发现小图标没,&lt;/p&gt;

</description>
        <pubDate>Fri, 11 May 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/05/11/%E6%98%9F%E4%BA%91%E9%93%BENebulas%E9%92%B1%E5%8C%85%E5%AE%89%E8%A3%85/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/05/11/%E6%98%9F%E4%BA%91%E9%93%BENebulas%E9%92%B1%E5%8C%85%E5%AE%89%E8%A3%85/</guid>
        
        
      </item>
    
      <item>
        <title>星云链nebulas转账命令</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;作者:刘蛟&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;#星云链转账
###启动创始区块&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;./neb -c conf/default/config.conf&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;###启动挖矿&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;./neb -c conf/example/miner.conf&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;###查询账户状态&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;curl -i -H Accept:application/json -X POST http://localhost:8685/v1/user/accountstate -d ‘{“address”:”n1FF1nz6tarkDVwWQkMnnwFPuPKUaQTdptE”}’&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;nonce值下次交易要加1&lt;/p&gt;

&lt;p&gt;##签名发送
###准备发的交易签名&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;curl -i -H ‘Content-Type: application/json’ -X POST http://localhost:8685/v1/admin/sign -d ‘{“transaction”:{“from”:”n1FF1nz6tarkDVwWQkMnnwFPuPKUaQTdptE”,”to”:”n1QZMXSZtW7BUerroSms4axNfyBGyFGkrh5”, “value”:”1000000000000000000”,”nonce”:1,”gasPrice”:”1000000”,”gasLimit”:”2000000”}, “passphrase”:”passphrase”}’&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;from是转账地址
to  是收款地址
result得到data
要注意nonce值,每次累加1&lt;/p&gt;

&lt;p&gt;###将签好名的交易原始数据提交到本地私有链里的星云节点&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;curl -i -H ‘Content-Type: application/json’ -X POST http://localhost:8685/v1/user/rawtransaction -d ‘{“data”:”CiAbjMP5dyVsTWILfXL1MbwZ8Q6xOgX/JKinks1dpToSdxIaGVcH+WT/SVMkY18ix7SG4F1+Z8evXJoA35caGhlXbip8PupTNxwV4SRM87r798jXWADXpWngIhAAAAAAAAAAAA3gtrOnZAAAKAEwuKuC1wU6CAoGYmluYXJ5QGRKEAAAAAAAAAAAAAAAAAAPQkBSEAAAAAAAAAAAAAAAAAAehIBYAWJBVVuRHWSNY1e3bigbVKd9i6ci4f1LruDC7AUtXDLirHlsmTDZXqjSMGLio1ziTmxYJiLj+Jht5RoZxFKqFncOIQA=”}’&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;转账完毕后,再次查询账户
result转账完毕后可以得到txhash值用来查询交易状态
data后面输入 上面得到的data&lt;/p&gt;

&lt;p&gt;###密码交易&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;curl -i -H ‘Content-Type: application/json’ -X POST http://localhost:8685/v1/admin/transactionWithPassphrase -d ‘{“transaction”:{“from”:”n1FF1nz6tarkDVwWQkMnnwFPuPKUaQTdptE”,”to”:”n1QZMXSZtW7BUerroSms4axNfyBGyFGkrh5”, “value”:”1000000000000000000”,”nonce”:2,”gasPrice”:”1000000”,”gasLimit”:”2000000”},”passphrase”:”passphrase”}’&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;同样要注意nonce值 
passphrase后面是密码
result转账完毕后可以得到txhash值用来查询交易状态&lt;/p&gt;

&lt;p&gt;##交易状态查询&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;curl -i -H Accept:application/json -X POST http://localhost:8685/v1/user/getTransactionReceipt -d ‘{“hash”:”8d69dea784f0edfb2ee678c464d99e155bca04b3d7e6cdba6c5c189f731110cf”}’&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;hash里面输入上面交易的txhash 可以看到交易信息
这里的status可能有三种状态值，0，1和2。
0: 交易失败. 表示当前交易已经上链，但是执行失败了。可能是因为部署合约或者调用合约参数错误。
1: 交易成功. 表示当前交易已经上链，而且执行成功了。
2: 交易待定. 表示当前交易还没有上链。可能是因为当前交易还没有被打包；如果长时间处于当前状态，可能是因为当前交易的发送者账户的余额不够支付上链手续费。&lt;/p&gt;

&lt;p&gt;###再次查询下账户信息&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;curl -i -H Accept:application/json -X POST http://localhost:8685/v1/user/accountstate -d ‘{“address”:”n1FF1nz6tarkDVwWQkMnnwFPuPKUaQTdptE”}’&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;可以得到结果&lt;/p&gt;

</description>
        <pubDate>Fri, 11 May 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/05/11/%E6%98%9F%E4%BA%91%E9%93%BENebulas%E8%BD%AC%E8%B4%A6%E5%91%BD%E4%BB%A4/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/05/11/%E6%98%9F%E4%BA%91%E9%93%BENebulas%E8%BD%AC%E8%B4%A6%E5%91%BD%E4%BB%A4/</guid>
        
        
      </item>
    
      <item>
        <title>星云链nebulas智能合约部署和调用</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;作者:刘蛟&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;星云链智能合约部署和调用&quot;&gt;星云链智能合约部署和调用&lt;/h1&gt;
&lt;p&gt;1.首先打开星云钱包
先确认下网络,是要部署到主链,测试链,还是本地,
选择合约(Contract),然后选择部署(Deploy)
合约代码(code)
写在下面,我在这里部署的是一个银行存取合约,可以调用存钱(save)和取钱(takeout)方法.
编程语言选择JavaScript
参数(arguments)
是你init方法里要传的值,也就是初次在区块链上要写入的值,我们这里不需要,所以暂时不用写
&lt;img src=&quot;http://p8ka0wokw.bkt.clouddn.com/WX20180511-191430@2x.png&quot; alt=&quot;GitHub set up&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2.选择自己的钱包,输入密码,点击解锁(Unlock)
下面会显示钱包内容,有钱包地址(From Address)
余额(Balance),小费上限(Gas limit)等等
这里说下汇率 1 NAS= 1Ewei =10^18wei
(就是后面18个0)
&lt;img src=&quot;http://p8ka0wokw.bkt.clouddn.com/WX20180511-191833@2x.png&quot; alt=&quot;GitHub set up&quot; /&gt;
3.点击测试(Test)
下面框里会显示
result:前面是init方法的值后面是预计要花的Gas
&lt;img src=&quot;http://p8ka0wokw.bkt.clouddn.com/WX20180511-192126@2x.png&quot; alt=&quot;GitHub set up&quot; /&gt;
4.确认后,没问题我们就可以点击提交啦(Submit)
提交后会有交易hash和智能合约地址(Contract address)
这俩个我们都要复制保存起来,以便后面找到合约.
&lt;img src=&quot;http://p8ka0wokw.bkt.clouddn.com/WX20180511-192018@2x.png&quot; alt=&quot;GitHub set up&quot; /&gt;
5.点击交易hash
可以看到hash,智能合约地址(Contract address),还有一个是当前状态(TxReceipt Status),如果显示pending
就是还没有完成,如果显示为success,就证明合约已经部署完毕啦,这里还可以复制合约地址和交易hash&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://p8ka0wokw.bkt.clouddn.com/WX20180511-192648@2x.png&quot; alt=&quot;GitHub set up&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Fri, 11 May 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/05/11/%E6%98%9F%E4%BA%91%E9%93%BENebulas%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E9%83%A8%E7%BD%B2%E5%92%8C%E8%B0%83%E7%94%A8/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/05/11/%E6%98%9F%E4%BA%91%E9%93%BENebulas%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E9%83%A8%E7%BD%B2%E5%92%8C%E8%B0%83%E7%94%A8/</guid>
        
        
      </item>
    
      <item>
        <title>星云链nebulas合约调用</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;作者:刘蛟&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;星云链合约调用&quot;&gt;星云链合约调用&lt;/h1&gt;
&lt;p&gt;交易hash:
f4c0cff0f8e812b6da5d63c973f22e4ec740f189bd0e2502d732a145405bb90e
合约地址(Contract address):
n1jgZAYD5dUuT8sWPsv4mGxdysC2ZR9VkTh
###1.智能合约搜索
通过交易hash我们可以从合约(Contract)里面的搜索(Search),搜索到我们刚刚部署的智能合约,
&lt;img src=&quot;http://p8ka0wokw.bkt.clouddn.com/WX20180511-194600@2x.png&quot; alt=&quot;rr&quot; /&gt;
###2.合约调用
接下来选择调用(Call),
首先方法(function)这里填刚才我们部署的一个方法,save 就是存钱,
参数(arguments)这里填上要存多少钱,由于NAS不多了,就先存个0.1吧,要注意是[” “]这个格式
然后还是依然选择钱包,输入密码,不过这里 To address要填合约地址(Contract address)
&lt;img src=&quot;http://p8ka0wokw.bkt.clouddn.com/WX20180511-195517@2x.png&quot; alt=&quot;uu&quot; /&gt;
###3. 合约测试
点击测试(Test),出现结果依然是init的空值和预计要花费的Gas
&lt;img src=&quot;http://p8ka0wokw.bkt.clouddn.com/WX20180511-195530@2x.png&quot; alt=&quot;ces&quot; /&gt;
###4.提交
确认完毕后,点击提交(Submit),会显示提交结果(Submit result)
得到交易hash,点击交易hash
&lt;img src=&quot;http://p8ka0wokw.bkt.clouddn.com/WX20180511-195539@2x.png&quot; alt=&quot;dkf&quot; /&gt;
还是跟部署合约时一样看到success就证明钱已经存进去了,最后再检查下余额,看下是不是少了0.1,
当然我们还可以通过takeout方法再把钱取出来&lt;/p&gt;

</description>
        <pubDate>Fri, 11 May 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/05/11/%E6%98%9F%E4%BA%91%E9%93%BENebulas%E5%90%88%E7%BA%A6%E8%B0%83%E7%94%A8/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/05/11/%E6%98%9F%E4%BA%91%E9%93%BENebulas%E5%90%88%E7%BA%A6%E8%B0%83%E7%94%A8/</guid>
        
        
      </item>
    
      <item>
        <title>星云链nebulas包安装</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;作者:刘蛟&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;星云链nebulas包安装&quot;&gt;星云链nebulas包安装&lt;/h1&gt;
&lt;p&gt;https://github.com/nebulasio/go-nebulas&lt;/p&gt;

&lt;p&gt;1.执行命令&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm i nebulas
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;安装nebulas,里面会有一些星云链部署合约所需要的方法和对象
2.安装完毕之后,可以去node_modules里的package里去看下 是否安装成功,成功会显示包名和版本号,安装成功后,就可以调用包下面的方法啦&lt;/p&gt;

</description>
        <pubDate>Fri, 11 May 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/05/11/%E6%98%9F%E4%BA%91%E9%93%BENebulas%E5%8C%85%E5%AE%89%E8%A3%85/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/05/11/%E6%98%9F%E4%BA%91%E9%93%BENebulas%E5%8C%85%E5%AE%89%E8%A3%85/</guid>
        
        
      </item>
    
      <item>
        <title>星云链dappmac开发必装软件 </title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;作者:刘蛟&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;#星云链mac开发必装软件 
###1.Homebrew 安装
这是官网https://brew.sh/
可以直接通过命令&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;安装,安装之后可以通过homebrew安装很多我们需要的东西.具体有什么可以看
https://github.com/Homebrew/homebrew-core/tree/master/Formula&lt;/p&gt;

&lt;p&gt;###2.git安装
我们安装好了Homebrew就可以安装git啦
通过命令&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew install git
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;就安装成功啦
git的主要作用是可以从github上克隆库&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone &amp;lt;远端git&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;还有一些数据同步的操作&lt;/p&gt;

&lt;p&gt;在本地文件夹下面执行&lt;code class=&quot;highlighter-rouge&quot;&gt;git init&lt;/code&gt;指令，初始化文件夹，作为本地的一个仓库。
执行&lt;code class=&quot;highlighter-rouge&quot;&gt;git remote add origin&lt;/code&gt; 仓库的ssh链接
执行&lt;code class=&quot;highlighter-rouge&quot;&gt;git pull&lt;/code&gt;指令，将远端代码拉取到本地&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git add                 添加文件到git仓库
git commit -m &quot;备注&quot;     确认完成
git status              仓库状态
git diff                查看修改的内容
git log                 查看历史纪录可以看到版本号
git reset 版本号         回到该版本
git reset - -hard HEAD^  回到上一个版本
                  HEAD^^ 回到上两个版本

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;###3.安装node
还是通过Homebrew来安装
直接执行命令&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew install node
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;node主要是来编译javeScript代码用的,可以脱离浏览器来检查代码
直接输入&lt;code class=&quot;highlighter-rouge&quot;&gt;node  js的文件名&lt;/code&gt; 就可以运行啦&lt;/p&gt;

&lt;p&gt;###4.安装npm
安装了node就不能不安npm&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo npm install npm -g
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;npm主要是
允许用户从NPM服务器下载别人编写的第三方包到本地使用。
允许用户从NPM服务器下载并安装别人编写的命令行程序到本地使用。
允许用户将自己编写的包或命令行程序上传到NPM服务器供别人使用。
有了npm我们就能安装一些库了
在package.json所在目录下使用&lt;code class=&quot;highlighter-rouge&quot;&gt;npm install . -g&lt;/code&gt;可先在本地安装当前命令行程序，可用于发布前的本地测试。
使用npm update &lt;package&gt;可以把当前目录下```node_modules```子目录里边的对应模块更新至最新版本。
使用```npm update &lt;package&gt; -g```可以把全局安装的对应命令行程序更新至最新版。
使用```npm cache clear```可以清空NPM本地缓存，用于对付使用相同版本号发布新版本代码的人。
###5.安装gulp
继续安装 官网 https://www.gulpjs.com.cn/&lt;/package&gt;&lt;/package&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;全局安装&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install --global gulp
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;2.作为项目的开发依赖（devDependencies）安装：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install --save-dev gulp
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;gulp可以把整个文件夹打包成一个文件&lt;/p&gt;

</description>
        <pubDate>Fri, 11 May 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/05/11/%E6%98%9F%E4%BA%91%E9%93%BEDAPPmac%E5%BC%80%E5%8F%91%E5%BF%85%E8%A3%85%E8%BD%AF%E4%BB%B6/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/05/11/%E6%98%9F%E4%BA%91%E9%93%BEDAPPmac%E5%BC%80%E5%8F%91%E5%BF%85%E8%A3%85%E8%BD%AF%E4%BB%B6/</guid>
        
        
      </item>
    
      <item>
        <title>React安装</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;作者:刘蛟&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;react安装&quot;&gt;React安装&lt;/h1&gt;
&lt;p&gt;官网  https://reactjs.org/
主要用来编写JS和XML,前后端结合
1.全局安装&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install -g create-react-app  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;2.使用命令创建文件myapp
不能有大写字母哦&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;create-react-app myapp 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;3.启动项目&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm start 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;进入项目,启动后看到logo 证明安装成功啦&lt;/p&gt;

&lt;p&gt;4.删除项目中的包&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm uninstall 包名
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;就可删除了,在看下package文件里,包就被删除了
如果还想还原,就在执行下&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;包就还原了&lt;/p&gt;

</description>
        <pubDate>Fri, 11 May 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/05/11/React%E5%AE%89%E8%A3%85/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/05/11/React%E5%AE%89%E8%A3%85/</guid>
        
        
      </item>
    
      <item>
        <title>Nebulas包调用</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;作者:刘蛟&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;nebulas包调用&quot;&gt;Nebulas包调用&lt;/h1&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var Nebulas = require('nebulas'); //es5 调包
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;###取包中的Neb
new Neb(request)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var Neb = Nebulas.Neb;  //把Nebulas里面的Neb单独取出`
var neb = new Neb(new Nebulas.HttpRequest(&quot;https://testnet.nebulas.io&quot;)) 
//传入测试网地址 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;有了Neb 我们就可以调用Neb里面的API了&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var api = neb.api; //调用Neb里的api
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;##API里的方法
###getNebState() 查询当前区块链状态 
 state就是的得到的结果 可以打印看看&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;api.getNebState().then(function(state) {  // 利用api 查询当前区块链状态
//console.log(state) 查询区块状态
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;###latestIrreversibleBlock()   查询当前链上最新区块信息
blockData可以得到区块信息&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;api.latestIrreversibleBlock().then(function(blockData) {
console.log(blockData)
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;###getAccountState(options) 查询某一个(type: 87)账号信息 也可以查智能合约(type: 88)的信息
address里可以地址
state就是当前账号信息&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;api.getAccountState({address: &quot;n1QsosVXKxiV3B4iDWNmxfN4VqpHn2TeUcn&quot;}).then(function(state) {
console.log(state)
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;###call(options) 调用智能合约方法
方法必须已经被提交
to:智能合约地址
function:智能合约方法
得到的tx就是&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;api.call({
   chainID: 1,
   from: &quot;n1QZMXSZtW7BUerroSms4axNfyBGyFGkrh5&quot;,
   to: &quot;n1SAeQRVn33bamxN4ehWUT7JGdxipwn8b17&quot;,
   value: 10,  //给智能合约转账,一般情况填0
   nonce: 12,  //交易次数
   gasPrice: 1000000,  //小费
   gasLimit: 2000000,   //消费上限
   contract: {
       function: &quot;save&quot;,  //方法名称
       args: &quot;[0]&quot; //给智能合约传参 
   }
}).then(function(tx) {  //结果
    //code
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Fri, 11 May 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/05/11/Nebulas%E5%8C%85%E8%B0%83%E7%94%A8/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/05/11/Nebulas%E5%8C%85%E8%B0%83%E7%94%A8/</guid>
        
        
      </item>
    
      <item>
        <title>Go语言基础 环境搭建</title>
        <description>&lt;h1 id=&quot;go语言环境搭建&quot;&gt;go语言环境搭建&lt;/h1&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    安装：go 1.9.4安装包，一直next，直到完成

            IDE工具安装，这里选择goland，简单方便，优点是不用下很多插件，也不用翻墙
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;缺点是每个月都要激活一次。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    环境变量配置Windows系统：
            1.我的电脑右键属性，进入环境变量

            2.在path下 要配置两个目录goroot/bin;gopath/bin

            3.在下面要新建两个目录goroot 和 gopath

               goroot配置安装路径一般都是c:/go等等

               gopath是工程目录，路径写你要保存go文件的目录比如C:/gocode等等

       环境变量配置完成后可以在 dos下运行试试 win+r键，输入cmd

                输入go 如果可以出现帮助，说明成功了

                输入go env 看下刚才配置的gopath和goroot是不是刚才的地址

  

       环境变量配置mac
             1.mac下基本不用配置，进入IDE工具试一下应该是可以之间编译的，网上有用

        终端来配置环境变量的我们都可以用利用IDE工具来完成。

              第一步 进入IDE    

        

        第二步 选择goroot 选择安装路径，图上就是默认安装路径
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;下面还有个gopath，这个不用配置，你只要在go下的src下新建个文件夹就可以保存的你go文件了&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;packmain main  
import &quot;fmt&quot;  
    func main (){  
        fmt.Println(&quot;Hello,world&quot;)  
} 

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;试试代码，go走起来&lt;/p&gt;

</description>
        <pubDate>Sat, 05 May 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/05/05/go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/05/05/go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</guid>
        
        
      </item>
    
      <item>
        <title>Go语言基础 常量</title>
        <description>&lt;h1 id=&quot;go语言基础-常量&quot;&gt;go语言基础 常量&lt;/h1&gt;
&lt;p&gt;2018年04月29日 12:09:54
阅读数：11 编辑
2.常量
	概念：类似变量，数值不可以更改
	语法：
		const 常量名 数据类型 = 赋值
		const 常量名 = 赋值
	赋值：常数，常量表达式
	常量的数值：布尔，数值，字符串&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;常量的名字，所有字母都大写。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;[plain] view plain copy
package main&lt;/p&gt;

&lt;p&gt;import “fmt”&lt;/p&gt;

&lt;p&gt;func main()  {&lt;br /&gt;
    /*&lt;br /&gt;
    常量：同变量类似，区别在于程序执行过程中，数值不可以改变&lt;br /&gt;
    定义语法：&lt;br /&gt;
        const 常量名 数据类型 = 常量值/常量表达式&lt;br /&gt;
        const 常量名 = 常量值&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;常量的数值：布尔类型，数值类型(整数，浮点，复数),字符串  
常量名：编码习惯：所有的字母都大写  
  
注意事项：  
1.常量定义后，可以不使用，也不会报错  
2.常量的值：布尔，数值，字符串  
    常量表达式：常量的计算，内置函数：len(),cap()  
3.常量组：定义了一组常量  
    没有直接定义常量值，默认和上一行一致。  
    常量组中定义的常量值是一组相关的数据，可以作为枚举  
4.iota，特殊的常量，理解为计数器，  
    定义const，iota的值从0开始。  
    常量组中定义了常量就累加1.  
 */  
 // 1.定义常量  
const cPATH string  = &quot;http://www.baidu.com&quot;  
const PI  = 3.14  
fmt.Println(cPATH)  
fmt.Println(PI)  
  
//pi = 3.67 // 不能给常量重新赋值  
  
const LENGTH int = 10  
const WIDTH int = 5  
var area int  
area = LENGTH * WIDTH  
fmt.Println(area)  
  
//var a = 2  
//var b = 7  
//const area2  = LENGTH * WIDTH  
//const area2  = a * b  
//fmt.Println(area2)  
  
const c = &quot;memeda&quot;  
const con2  = len(c)  
  
// 同时定义多个常量  
const a2, b2, c2 = 1, false, &quot;str&quot; //多重赋值  
  
// 常量组  
const (  
    a3 = 10  
    a4 = false  
    a5 = 3.14  
)  
//定义常量组的时候，如果没有指定类型和数值，默认和上一行相同  
const (  
    x uint16 = 16 // 16  
    y //16  
    s = &quot;abc&quot; // &quot;abc&quot;  
    z // &quot;abc&quot;  
)  
fmt.Println(x, y, s, z)  
  
// 用于枚举：一年四季，一周七天  
const (  
    Sunday = 0  
    Monday = 1  
    Tuesday = 2  
    Wednesday = 3  
    Thursday = 4  
    Friday = 5  
    Saturday = 6  
)  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;}&lt;br /&gt;
iota，特殊的常量，计数器
	定义const组时，iota初始为0，每定义一个常量累加1。直到下一个const，重新置为0。
[plain] view plain copy
package main&lt;/p&gt;

&lt;p&gt;import “fmt”&lt;/p&gt;

&lt;p&gt;func main()  {&lt;br /&gt;
    // iota，特殊的常量值，每当定义了const，iota的值置为0，&lt;br /&gt;
    // 每当定义一个常量，累加1。遇到const时，重新置为0&lt;br /&gt;
    const  (&lt;br /&gt;
        a = iota // 0&lt;br /&gt;
        b = iota // 1&lt;br /&gt;
        c = iota // 2&lt;br /&gt;
    )&lt;br /&gt;
    fmt.Println(a, b, c)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 简写成  
const (  
    d = iota  
    e  
    f  
)  
fmt.Println(d, e, f)  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;}&lt;/p&gt;

</description>
        <pubDate>Sat, 05 May 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/05/05/go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80-%E5%B8%B8%E9%87%8F/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/05/05/go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80-%E5%B8%B8%E9%87%8F/</guid>
        
        
      </item>
    
  </channel>
</rss>
